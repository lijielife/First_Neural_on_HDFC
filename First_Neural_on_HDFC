#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 27 17:45:48 2018

@author: yashagarwal
"""
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
import numpy as np
import pandas as pd
#import talib
import random
random.seed(42)
dataset=pd.read_csv('/Users/yashagarwal/Desktop/NSE-HDFCBANK.csv')
dataset=dataset.dropna()
dataset=dataset[['Open','Close','High','Low']]
dataset['H-L']=dataset['High']-dataset['Low']
dataset['O-C']=dataset['Close']-dataset['Open']
dataset['3day MA']=dataset['Close'].shift(1).rolling(window=3).mean()
dataset['10day MA']=dataset['Close'].shift(1).rolling(window=10).mean()
dataset['Std_dev']=dataset['Close'].rolling(5).std
dataset['Price_rise']=np.where(dataset['Close'].shift(-1)>dataset['Close'],1,0)
dataset=dataset.dropna()
X=dataset.iloc[:, 4:-1]
y=dataset.iloc[:, -1]
split=int(len(dataset)*0.8)
X_train, X_test, y_train, y_test= X[:split], X[split:], y[:split], y[split:]
X_train= sc.fit_transform(X_train)
X_test=sc.transform(X_test)
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
model=Sequential()
model.add(Dense(128, kernel_initializer='uniform', activation='relu', input_dim=X.shape[1]))
model.add(Dense(128, kernel_initializer='uniform', activation='relu'))
model.add(1, kernel_initializer='uniform', activation='sigmoid')
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])
model.fit(X_train, y_train, batch_size=10, epochs=100)
y_pred=model.fit(X_test)
y_pred=(y_pred>0.5)
dataset['y_pred']=np.NaN
dataset.iloc[(len(dataset)-len(y_pred)):,-1:]= y_pred
trade_dataset= dataset.dropna()
trade_dataset['Tomorrows Returns'] = 0.
trade_dataset['Tomorrows Returns'] = np.log(trade_dataset['Close']/trade_dataset['Close'].shift(1))
trade_dataset['Tomorrows Returns'] = trade_dataset['Tomorrows Returns'].shift(-1)
trade_dataset['Strategy Returns'] = 0.
trade_dataset['Strategy Returns'] = np.where(trade_dataset['y_pred'] == True, trade_dataset['Tomorrows Returns'], - trade_dataset['Tomorrows Returns'])
trade_dataset['Cumulative Market Returns'] = np.cumsum(trade_dataset['Tomorrows Returns'])
trade_dataset['Cumulative Strategy Returns'] = np.cumsum(trade_dataset['Strategy Returns'])
import matplotlib.pyplot as plt
plt.figure(figsize=(10,5))
plt.plot(trade_dataset['Cumulative Market Returns'], color='r', label='Market Returns')
plt.plot(trade_dataset['Cumulative Strategy Returns'], color='g', label='Strategy Returns')
plt.legend()
plt.show()